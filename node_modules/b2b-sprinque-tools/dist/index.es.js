var regNumber = {
	errors: {
		required: "Registration number and country code are required",
		deleteFourLastDigits: "Please remove 4 last digits",
		formatIs: "Registration number format should be like",
		itIsVat: "The value seems to be a VAT ID. Please follow the format like"
	}
};
var en = {
	regNumber: regNumber
};

var nl = {
	"regNumber.errors.deleteFourLastDigits": "Verwijder de laatste 4 cijfers",
	"regNumber.errors.formatIs": "Het formaat van het registratienummer moet zijn",
	"regNumber.errors.itIsVat": "De waarde lijkt een btw-nummer te zijn. Volg het formaat zoals",
	"regNumber.errors.required": "Registratienummer en landcode zijn vereist"
};

var de = {
	"regNumber.errors.deleteFourLastDigits": "Bitte entfernen Sie die letzten 4 Ziffern",
	"regNumber.errors.formatIs": "Das Format der Handelsregisternummer sollte wie folgt aussehen",
	"regNumber.errors.itIsVat": "Der Wert scheint eine USt-IdNr. zu sein. Bitte folgen Sie dem Format wie",
	"regNumber.errors.required": "Handelsregisternummer und Ländercode sind erforderlich"
};

var es = {
	"regNumber.errors.deleteFourLastDigits": "Por favor, elimine los 4 últimos dígitos",
	"regNumber.errors.formatIs": "El formato del número de registro debe ser el siguiente",
	"regNumber.errors.itIsVat": "El valor parece ser un NIF. Por favor, siga el formato como",
	"regNumber.errors.required": "Se requiere el número de registro y el código de país"
};

var fr = {
	"regNumber.errors.deleteFourLastDigits": "Veuillez enlever les 4 derniers chiffres",
	"regNumber.errors.formatIs": "Le format du numéro d'enregistrement doit être le suivant",
	"regNumber.errors.itIsVat": "La valeur semble être un numéro de TVA. Veuillez suivre le format suivant",
	"regNumber.errors.required": "Le numéro d'enregistrement et le code pays sont requis"
};

var languages = {
  en,
  nl,
  de,
  es,
  fr
};

// for en translations are like object {regNumber: {errors: {required: ''}}
const getTranslationKey = (lang, key1, key2) => {
  if (lang === 'en') {
    // @ts-ignore
    return languages[lang].regNumber[key1][key2];
  } else {
    // @ts-ignore
    return languages[lang][`regNumber.${key1}.${key2}`];
  }
};

const checkRegistrationNumber = (regNumber, countryCode, lang = 'en') => {
  if (!regNumber || !countryCode) {
    return {
      isValid: false,
      message: getTranslationKey(lang, 'errors', 'required')
    };
  }
  switch (countryCode.toLowerCase()) {
    case 'nl':
      {
        // The Netherlands
        if (Number.isInteger(+regNumber) && regNumber.length === 8) {
          return {
            isValid: true,
            message: ''
          };
        } else if (Number.isInteger(+regNumber) && regNumber.length === 12) {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'deleteFourLastDigits')
          };
        } else {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'formatIs') + ' "77651006"'
          };
        }
      }
    case 'be':
      {
        // Belgium
        // Not allowing to use values like BE0711949514, as it is VAT ID.
        if (Number.isInteger(+regNumber) && regNumber.length === 9) {
          return {
            isValid: true,
            message: ''
          };
        } else if (regNumber.toLowerCase().startsWith('be')) {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'itIsVat') + ' "071194951"'
          };
        } else {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'formatIs') + ' "071194951"'
          };
        }
      }
    case 'es':
      {
        // Spain
        if (regNumber.length === 9) {
          return {
            isValid: true,
            message: ''
          };
        } else {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'formatIs') + ' "00275914Y" or "B10612307"'
          };
        }
      }
    case 'fr':
      {
        // France
        if (Number.isInteger(+regNumber) && regNumber.length === 9) {
          return {
            isValid: true,
            message: ''
          };
        } else if (regNumber.toLowerCase().startsWith('fr')) {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'itIsVat') + ' "410034607"'
          };
        } else {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'formatIs') + ' "410034607"'
          };
        }
      }
    case 'de':
      {
        // Germany
        const [letters, number] = regNumber.split(' '); // ['HRA', '2342']
        if (letters && number && Number.isInteger(+number)) {
          return {
            isValid: true,
            message: ''
          };
        } else if (regNumber.toLowerCase().startsWith('de')) {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'itIsVat') + ' "VR 1234, HRA 1234 or HRB 12345"'
          };
        } else {
          return {
            isValid: false,
            message: getTranslationKey(lang, 'errors', 'formatIs') + ' "VR 1234, HRA 1234 or HRB 12345"'
          };
        }
      }
    default:
      {
        return {
          isValid: true,
          message: ''
        };
      }
  }
};

const checkRegNumber = checkRegistrationNumber;

export { checkRegNumber };
